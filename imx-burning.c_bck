#include <stdio.h>
//#include <unistd.h>
//#include <sys/types.h>
//#include <sys/stat.h>
//#include <fcntl.h>
#include <stdlib.h>

#define DCD_PAIRS 30

struct image_IVT {
	unsigned long header;
	unsigned long entry;
	unsigned long reserved1;
	unsigned long dcd;
	unsigned long boot_data;
	unsigned long self;
	unsigned long csf;
	unsigned long reserved2;
};

struct boot_data {
	unsigned long start;
	unsigned long length;
	unsigned long plugin_flag;
};

struct addr_val {
	unsigned adress;
	unsigned val_mask;
};

struct image_DCD {
	unsigned long header;
	unsigned command_format;
	struct addr_val pairs[DCD_PAIRS];
};

struct firmware_header {
	struct image_IVT ivt;
	struct boot_data boot_data;
	struct image_DCD dcd;
};

int cmd_get(const char *cmd, char *out)
{
	FILE *fcmd;	

	fcmd = popen(cmd, "r");

	if (!cmd) {
		printf("popen error, exited\n");
		return -1;
	}

	if (!fgets(out, sizeof(out), fcmd)) {
		printf("fgets error, exited\n");
		return -1;
	}

	pclose(fcmd);
	return 0;
}

int main(int argc, char *argv[])
{
	char cmd[32] = { 0 };
	char cmd_out[32] = { 0 };
	char zero_buf[2540];

	sprintf(cmd, "ls -l %s | awk '{ print $5}'", argv[1]);
	cmd_get(cmd, cmd_out);

	struct firmware_header header = {
		.ivt = {
			.header	  = 0XD1200041,
			.entry	  = 0X80001000,
			.reserved1 = 0X00000000,
			.dcd	  = 0X7FFFFE18,
			.boot_data = 0X80000420,
			.self	  = 0X80000400,
			.csf	  = 0X00000000,
			.reserved2 = 0X00000000,	
		},

		.boot_data = {
			.start = 0X80000000,
			.plugin_flag = 0X00000000,
		},

		.dcd = {
			.header = 0XD2E80141,
			.command_format = 0XCCE40114,
		},
	};

	header.boot_data.length = atoi(cmd_out);


	FILE *fd = fopen("bin_test", "wrba");

	fwrite(&header.ivt.header, 4, 1, fd);
	fwrite(&header.ivt.entry, 4, 1, fd);
	fwrite(&header.ivt.reserved1, 4, 1, fd);
	fwrite(&header.ivt.dcd, 4, 1, fd);
	fwrite(&header.ivt.boot_data, 4, 1, fd);
	fwrite(&header.ivt.self, 4, 1, fd);
	fwrite(&header.ivt.csf, 4, 1, fd);
	fwrite(&header.ivt.reserved2, 4, 1, fd);

	fwrite(&header.boot_data.start, 4, 1, fd);
	fwrite(&header.boot_data.length, 4, 1, fd);
	fwrite(&header.boot_data.plugin_flag, 4, 1, fd);

	fwrite(zero_buf, 2540, 1, fd);

	fwrite(&header.dcd.header, 4, 1, fd);
	fwrite(&header.dcd.command_format, 4, 1, fd);

	pclose(fd);
	


	return 0;	
}
